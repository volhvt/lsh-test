<?php
/**
 * Created by PhpStorm.
 * User: volhv
 * Date: 28.07.19
 * Time: 22:46
 */

namespace classes;


use JsonSerializable;

class EntityRequest extends Servant implements JsonSerializable
{
    protected $_entityKey;

    protected $_entityFillFields = [];

    //protected $_rules = [];

    protected $_errors = [];

    protected $_validationErrors = [];

    protected $_isValid = null;

    protected $_entity = null;

    protected $_countFills = 0;

    public function __construct($data)
    {
        $arr = !empty($data[$this->_entityKey]) && is_array($data[$this->_entityKey])
            ? $data[$this->_entityKey]
            : $data;
        parent::__construct($arr);
        $this->fill($arr);
    }

    public function messages()
    {
        return [];
    }

    public function rules()
    {
        return [];
    }

    /**
     * @param $arr
     */
    public function fill($arr)
    {
        parent::fill($arr); // TODO: Change the autogenerated stub
        $this->_isValid = null;
        $this->clearErrors();
        $this->_entity = null;
        $this->_countFills = 0;
    }

    /**
     * @param Model $entity
     * @return int
     */
    public function fillEntity(Model &$entity)
    {
        $this->_countFills = 0;
        foreach ($this->_values as $key => $value) {
            if (in_array($key, $this->_entityFillFields)) {
                $entity->$key = $value;
                $this->_countFills++;
            }
        }
        return $this->_countFills;
    }

    /**
     * @return bool
     */
    public function valid()
    {
        $this->clearErrors();
        foreach ($this->rules() as $field => $rulesStr) {
            if ($rulesStr) {
                $validator = new Validator($field, $rulesStr);
                $validator->valid($this->$field);
                $this->validationError($field, $validator->getErrors());
            }
        }
        $this->_isValid = !boolval(count($this->_validationErrors));
        return $this->_isValid;
    }

    /**
     * @return bool|null
     */
    public function isValid()
    {
        if (is_null($this->_isValid))
            return $this->valid();

        return $this->_isValid;
    }

    /**
     * @return bool
     */
    public function isEmpty()
    {
        return !boolval(count($this->_values));
    }

    /**
     * @param Model $entity
     * @return bool|null
     */
    public function store(Model &$entity)
    {
        $this->_entity = &$entity;

        if ($this->isEmpty())
            return null;

        //try load entity from request if isset primary key for entity
        $idField = $entity->getPrimaryKey();
        if (isset($this->$idField) && $this->$idField !== '') {
            $entity = $entity->find($this->$idField);
            if (empty($entity->$idField)) {
                $this->error('Entity not found!');
                return false;
            }
        }

        if (!$this->fillEntity($entity))
            return NULL;


        if ($entity->save())
            return true;

        $this->errors($entity->getErrors());
        return false;
    }

    public function clearErrors()
    {
        $this->_errors = [];
        $this->_validationErrors = [];
    }

    public function error($message)
    {
        $this->_errors[] = $message;
    }

    public function errors($arr)
    {
        $this->_errors = array_merge($this->_errors, $arr);
    }

    public function hasErrors()
    {
        return !empty($this->_errors) || !empty($this->_validationErrors);
    }

    public function getErrors()
    {
        return array_merge($this->_errors, ['validation' => $this->_validationErrors]);
    }

    public function validationError($field, $arrErrors)
    {
        if (is_array($arrErrors) && !empty($arrErrors)) {
            if (isset($this->_validationErrors[$field])) {
                $this->_validationErrors[$field] = array_merge($this->_validationErrors[$field], $arrErrors);
            } else {
                $this->_validationErrors[$field] = $arrErrors;
            }
        }
    }

    public function toArray()
    {
        return [
            'entityKey' => $this->_entityKey,
            'entityClass' => $this->_entity,
            'countFills' => $this->_countFills,
            'values' => $this->_values,
            'errors' => $this->_errors,
            'validation' => $this->_validationErrors,
        ];
    }

    public function jsonSerialize()
    {
        return $this->toArray();
    }
}